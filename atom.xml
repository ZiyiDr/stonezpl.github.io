<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张珮磊想静静</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zplxjj.com/"/>
  <updated>2019-06-27T11:23:04.093Z</updated>
  <id>https://www.zplxjj.com/</id>
  
  <author>
    <name>张珮磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的一些撤销操作</title>
    <link href="https://www.zplxjj.com/2019/06/27/git/"/>
    <id>https://www.zplxjj.com/2019/06/27/git/</id>
    <published>2019-06-27T11:21:53.000Z</published>
    <updated>2019-06-27T11:23:04.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用开发项目的时候，经常会写着写着会发现写错的时候，人生没有后悔药，但是git有啊，大不了从头再来嘛。<br><a id="more"></a></p><h2 id="git的一些撤销操作"><a href="#git的一些撤销操作" class="headerlink" title="git的一些撤销操作"></a>git的一些撤销操作</h2><h3 id="代码还没有存到暂存区"><a href="#代码还没有存到暂存区" class="headerlink" title="代码还没有存到暂存区"></a>代码还没有存到暂存区</h3><p>当我们修改了一个文件，还没有执行git add操作的时候，发现写错的时候.<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  xiaoyan_es_static git:(master) ✗ cat README.md</span><br><span class="line">es日志统计查询</span><br><span class="line">我写错了,不想要这行了</span><br></pre></td></tr></table></figure></p><p>我们可以使用如下命令，回到最后一次提交的版本<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;...</span><br></pre></td></tr></table></figure></p><p>执行完git checkout – README.md 命令后<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  xiaoyan_es_static git:(master) ✗ cat README.md</span><br><span class="line">es日志统计查询</span><br></pre></td></tr></table></figure></p><h3 id="代码存储到了暂存区"><a href="#代码存储到了暂存区" class="headerlink" title="代码存储到了暂存区"></a>代码存储到了暂存区</h3><p>当我们一不小心将代码存入了暂存区<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  xiaoyan_es_static git:(master) ✗ git add .</span><br><span class="line">➜  xiaoyan_es_static git:(master) ✗ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   README.md</span><br></pre></td></tr></table></figure></p><p>我们可以使用如下命令，回到最后一次提交的版本<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;...</span><br></pre></td></tr></table></figure></p><p>执行完命令后如下所示<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  xiaoyan_es_static git:(master) ✗ cat README.md </span><br><span class="line">es日志统计查询</span><br><span class="line">这行写错了，但是已经存到暂存区了%                                                                                                                                                                         ➜  xiaoyan_es_static git:(master) ✗ git status              </span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="代码已经commit了"><a href="#代码已经commit了" class="headerlink" title="代码已经commit了"></a>代码已经commit了</h3><p>当我们修改的代码已经commit了，我们只需要执行<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  xiaoyan_es_static git:(master) git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p><p>上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><p>###代码已经push到远程了<br>少年，你怎么这么冲动呢</p><h2 id="git的一些其它操作"><a href="#git的一些其它操作" class="headerlink" title="git的一些其它操作"></a>git的一些其它操作</h2><p>当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm file_path</span><br><span class="line">git commit -m &apos;delete somefile&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached file_path</span><br><span class="line">git commit -m &apos;delete remote somefile&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>当我们对文件或者文件夹执行过chmod操作时，执行git diff会出现类似’ old mode xxx new mode xxx’,这个时候我们只需要执行如下命令即可<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --add core.filemode false</span><br></pre></td></tr></table></figure></p><p>这样你的所有的git库都会忽略filemode变更了～</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在用开发项目的时候，经常会写着写着会发现写错的时候，人生没有后悔药，但是git有啊，大不了从头再来嘛。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://www.zplxjj.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>java混淆了吗</title>
    <link href="https://www.zplxjj.com/2019/06/10/java/"/>
    <id>https://www.zplxjj.com/2019/06/10/java/</id>
    <published>2019-06-10T11:05:04.000Z</published>
    <updated>2019-06-10T11:10:27.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在项目中碰到个一个场景，我们需要把自己的java项目jar包部署到一个第三方的服务器上，虽然双方互相信任，但是综合考虑，避免别人拿到jar包后可以很快的编译出源码，我们决定给代码加一层混淆，虽然此方法不能从根源上解决问题，但是做了一层混淆，也可以增加阅读源码的难度，总结了一下，写下这篇文章。<br><a id="more"></a></p><h2 id="如何反编译java代码"><a href="#如何反编译java代码" class="headerlink" title="如何反编译java代码"></a>如何反编译java代码</h2><p>我用的是mac电脑，从官网:<a href="http://java-decompiler.github.io/#jd-gui-download" target="_blank" rel="noopener">http://java-decompiler.github.io/#jd-gui-download</a>下载JD-GUI，官网有很多版本，下载后安装打开即可，导入你想反编译的jar，我这里随便找了个jar包做演示<br><img src="/2019/06/10/java/2019-06-08-14-32-52.png" alt></p><h2 id="何为java混淆"><a href="#何为java混淆" class="headerlink" title="何为java混淆"></a>何为java混淆</h2><p>细心的小伙伴肯定发现了，上面的截图有的包名是a，b，c这样命名的，但凡有点节操的程序员都不会这样命名的，这就是被混淆后的代码，让人不会一眼看出来代码里面的逻辑，效果会像下面这样<br><img src="/2019/06/10/java/2019-06-08-14-37-01.png" alt><br>可以看到类名，包名都被修改了</p><h2 id="进行java混淆"><a href="#进行java混淆" class="headerlink" title="进行java混淆"></a>进行java混淆</h2><p>我们以之前springboot项目为例，进行service层的代码的混淆，呼啸前效果如下：<br><img src="/2019/06/10/java/2019-06-08-14-46-17.png" alt><br><img src="/2019/06/10/java/2019-06-08-14-46-36.png" alt></p><p>接下来我们只需要在pom里面加入如下插件<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wvengen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>proguard<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">proguardVersion</span>&gt;</span>6.1.0beta2<span class="hljs-tag">&lt;/<span class="hljs-name">proguardVersion</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">injar</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">outjar</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">obfuscate</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">obfuscate</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">options</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontshrink<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontoptimize<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will replace all strings in reflections method invocations with new class names.</span></span><br><span class="line"><span class="hljs-comment">                 For example, invokes Class.forName('className')--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-adaptclassstrings<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepdirectories<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original annotations and etc. Otherwise all we be removed from files.--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepattributes</span><br><span class="line">                Exceptions,</span><br><span class="line">                InnerClasses,</span><br><span class="line">                Signature,</span><br><span class="line">                Deprecated,</span><br><span class="line">                SourceFile,</span><br><span class="line">                LineNumberTable,</span><br><span class="line">                *Annotation*,</span><br><span class="line">                EnclosingMethod</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original names in interfaces (without obfuscate).--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepnames interface **<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original methods parameters in files defined in -keep sections,</span></span><br><span class="line"><span class="hljs-comment">                 otherwise all parameter names will be obfuscate.--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepparameternames<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--不使用大小写字母进行混淆，保持类唯一性--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontusemixedcaseclassnames<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original class files (without obfuscate) but obfuscate all</span></span><br><span class="line"><span class="hljs-comment">                 in domain and service packages.--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep</span><br><span class="line">                class com.stone.zplxjj.Application &#123;</span><br><span class="line">                public static void main(java.lang.String[]);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- 指明哪些类可以不被混淆--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.autoconfiguration.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.config.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.controller.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.dao.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.entity.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.event.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.interceptor.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.listener.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.properties.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.stone.zplxjj.filter.** &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option ignore warnings such as duplicate class definitions and classes in incorrectly</span></span><br><span class="line"><span class="hljs-comment">                named files--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-ignorewarnings<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original class files (without obfuscate) in service package--&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--&lt;option&gt;-keep class com.slm.proguard.example.spring.boot.service &#123; *; &#125;&lt;/option&gt;--&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original interfaces files (without obfuscate) in all packages.--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep interface * extends * &#123; *; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!-- This option will save all original defined annotations in all class in all packages.--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepclassmembers class * &#123;</span><br><span class="line">                @org.springframework.beans.factory.annotation.Autowired *;</span><br><span class="line">                @org.springframework.beans.factory.annotation.Value *;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">options</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">injarNotExistsSkip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">injarNotExistsSkip</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">libs</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--Put here your libraries if required--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="hljs-tag">&lt;/<span class="hljs-name">lib</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">libs</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.proguard<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>proguard-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.0beta2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行打包命令：mvn package，会看到生成如下<br><img src="/2019/06/10/java/2019-06-10-18-53-46.png" alt><br>我们看到了生成了不只一个jar包，还有一些别的文件，这个我们放后面介绍，我们先看下划红线的jar反编译后的效果<br><img src="/2019/06/10/java/2019-06-10-18-54-58.png" alt><br><img src="/2019/06/10/java/2019-06-10-18-55-34.png" alt><br>可以看到我们针对service包下面的类混淆成功了</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>zplxjj_proguard_base.jar是没有经过混淆的jar</li><li>两个.txt文件说明了混淆前和混淆后的对应关系</li><li>如果项目中引入了spring框架，类的注入id要保持唯一性，否则就要重写生成bean的id规则的方法</li><li>更多pom文件细节可以参考：<a href="https://www.guardsquare.com/en/products/proguard/manual/usage#obfuscationoptions" target="_blank" rel="noopener">https://www.guardsquare.com/en/products/proguard/manual/usage#obfuscationoptions</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在项目中碰到个一个场景，我们需要把自己的java项目jar包部署到一个第三方的服务器上，虽然双方互相信任，但是综合考虑，避免别人拿到jar包后可以很快的编译出源码，我们决定给代码加一层混淆，虽然此方法不能从根源上解决问题，但是做了一层混淆，也可以增加阅读源码的难度，总结了一下，写下这篇文章。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java杂事" scheme="https://www.zplxjj.com/categories/java%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>springcloud(二)——spring-cloud-alibaba集成sentinel入门</title>
    <link href="https://www.zplxjj.com/2019/05/11/springcloud/"/>
    <id>https://www.zplxjj.com/2019/05/11/springcloud/</id>
    <published>2019-05-11T04:46:15.000Z</published>
    <updated>2019-05-11T08:51:06.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentinel-介绍"><a href="#Sentinel-介绍" class="headerlink" title="Sentinel 介绍"></a>Sentinel 介绍</h2><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><ol><li><p>丰富的应用场景： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</p></li><li><p>完备的实时监控： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p></li><li><p>广泛的开源生态： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p></li><li><p>完善的 SPI 扩展点： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</p><a id="more"></a></li></ol><h2 id="springcloud如何使用-Sentinel"><a href="#springcloud如何使用-Sentinel" class="headerlink" title="springcloud如何使用 Sentinel"></a>springcloud如何使用 Sentinel</h2><p>第一步：引入pom<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第二步：新建一个启动类和controller<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-meta">@SentinelResource</span>(<span class="hljs-string">"hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello Sentinel"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三步：引入dashboard<br>可以直接下载sentinel-dashboard的jar包，也可以自己编译，我这边这里clone了代码自己编译，代码地址：<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a>,执行命令<br><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></p><p>会得到：sentinel-dashboard.jar，执行命令启动dashboard：<br><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure></p><p>这样默认是8080端口，在浏览器输入：<a href="http://localhost:8080，默认账号密码：sentinel:sentinel，看到控制台界面为部署成功：" target="_blank" rel="noopener">http://localhost:8080，默认账号密码：sentinel:sentinel，看到控制台界面为部署成功：</a></p><p>第四步：引入配置：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=8088</span><br><span class="line">spring.application.name=spring-cloud-alibaba-sentinel-demo</span><br><span class="line"></span><br><span class="line"># sentinel dashboard</span><br><span class="line">spring.cloud.sentinel.transport.dashboard=localhost:8080</span><br></pre></td></tr></table></figure></p><p>第五步：启动spring boot 项目，继续访问localhost:8080,会看到如下界面<img src="/2019/05/11/springcloud/pringcloud001.png" alt></p><p>第六步：使用Sentinel实现接口限流(在控制台)<img src="/2019/05/11/springcloud/springcloud002.png" alt></p><p>第七步：测试<br>通过上面的配置，实现的是/hello接口qps最大是2，如果qps大于2，则快速失败，配置完成，点击保存，我们快速刷新浏览器，会发现快速失败<br><img src="/2019/05/11/springcloud/springcloud003.png" alt></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这篇文章只是springcloud和sentinel的入门，复杂的一些代码配置和文件配置后期介绍</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sentinel-介绍&quot;&gt;&lt;a href=&quot;#Sentinel-介绍&quot; class=&quot;headerlink&quot; title=&quot;Sentinel 介绍&quot;&gt;&lt;/a&gt;Sentinel 介绍&lt;/h2&gt;&lt;p&gt;随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。&lt;/p&gt;
&lt;p&gt;Sentinel 具有以下特征:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;丰富的应用场景： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完备的实时监控： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广泛的开源生态： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完善的 SPI 扩展点： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="springcloud" scheme="https://www.zplxjj.com/categories/springcloud/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(六)——springboot与webflux结合初探</title>
    <link href="https://www.zplxjj.com/2019/05/05/springboot/"/>
    <id>https://www.zplxjj.com/2019/05/05/springboot/</id>
    <published>2019-05-05T04:46:15.000Z</published>
    <updated>2019-05-05T04:21:09.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-cloud-gateway-的ReactorHttpHandlerAdapter"><a href="#spring-cloud-gateway-的ReactorHttpHandlerAdapter" class="headerlink" title="spring-cloud-gateway 的ReactorHttpHandlerAdapter"></a>spring-cloud-gateway 的ReactorHttpHandlerAdapter</h2><p>这几天看了看spring-cloud-gateway的请求处理流程，因为之前一直用的springboot1.x和spring4，一开始对spring-cloud-gateway的处理流程有点懵逼，找不到入口，后来跟了代码，在网上找了点资料，发现spring-cloud-gateway的入口在ReactorHttpHandlerAdapter的apply方法<br><a id="more"></a><br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactorHttpHandlerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BiFunction</span>&lt;<span class="hljs-title">HttpServerRequest</span>, <span class="hljs-title">HttpServerResponse</span>, <span class="hljs-title">Mono</span>&lt;<span class="hljs-title">Void</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Log logger = HttpLogging.forLogName(ReactorHttpHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpHandler httpHandler;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReactorHttpHandlerAdapter</span><span class="hljs-params">(HttpHandler httpHandler)</span> </span>&#123;</span><br><span class="line">Assert.notNull(httpHandler, <span class="hljs-string">"HttpHandler must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.httpHandler = httpHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">apply</span><span class="hljs-params">(HttpServerRequest reactorRequest, HttpServerResponse reactorResponse)</span> </span>&#123;</span><br><span class="line">NettyDataBufferFactory bufferFactory = <span class="hljs-keyword">new</span> NettyDataBufferFactory(reactorResponse.alloc());</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">ReactorServerHttpRequest request = <span class="hljs-keyword">new</span> ReactorServerHttpRequest(reactorRequest, bufferFactory);</span><br><span class="line">ServerHttpResponse response = <span class="hljs-keyword">new</span> ReactorServerHttpResponse(reactorResponse, bufferFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (request.getMethod() == HttpMethod.HEAD) &#123;</span><br><span class="line">response = <span class="hljs-keyword">new</span> HttpHeadResponseDecorator(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.httpHandler.handle(request, response)</span><br><span class="line">.doOnError(ex -&gt; logger.trace(request.getLogPrefix() + <span class="hljs-string">"Failed to complete: "</span> + ex.getMessage()))</span><br><span class="line">.doOnSuccess(aVoid -&gt; logger.trace(request.getLogPrefix() + <span class="hljs-string">"Handling completed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Failed to get request URI: "</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">reactorResponse.status(HttpResponseStatus.BAD_REQUEST);</span><br><span class="line"><span class="hljs-keyword">return</span> Mono.empty();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法的作用就是把接收到的HttpServerRequest或者最终需要返回的HttpServerResponse，包装转换为ReactorServerHttpRequest和ReactorServerHttpResponse。</p><h2 id="spring-webflux"><a href="#spring-webflux" class="headerlink" title="spring-webflux"></a>spring-webflux</h2><p>当然，这篇文章的主要内容不是谈论spring-cloud-gateway了，因为之前一直用的spring4，所以对spring5当中的反应式编程范式和webflux不太了解，所以先写个demo了解一下<br><strong>第一步</strong>：引入相关pom,测试的相关pom根据自己的需要引入<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.projectreactor<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reactor-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>第二步</strong>：创建一个HandlerFunction<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFunction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerFunction</span>&lt;<span class="hljs-title">ServerResponse</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;ServerResponse&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerRequest serverRequest)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> ServerResponse.ok().body(</span><br><span class="line">                Mono.just(parse(serverRequest, <span class="hljs-string">"args1"</span>) + parse(serverRequest, <span class="hljs-string">"args2"</span>))</span><br><span class="line">                , Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerRequest request, <span class="hljs-keyword">final</span> String param)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Integer.parseInt(request.queryParam(param).orElse(<span class="hljs-string">"0"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第三步</strong>：注入一个RouterFunction<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRouteFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="hljs-title">routerFunction</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> RouterFunctions.route(RequestPredicates.GET(<span class="hljs-string">"/add"</span>), <span class="hljs-keyword">new</span> TestFunction());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第四步</strong>：在webflux中，也可以使用之前的java注解的编程方式，我们也创建一个controller<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api/test"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第五步</strong>：创建启动类<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spring5DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Spring5DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第六步</strong>：启动项目，访问如下两个接口都可以<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/api/test/hello</span><br><span class="line">http://localhost:8080/add?args1=2&amp;args2=3</span><br></pre></td></tr></table></figure></p><h2 id="和spring-boot结合"><a href="#和spring-boot结合" class="headerlink" title="和spring-boot结合"></a>和spring-boot结合</h2><p>通过上面的例子，我们看到基本的两个类：HandlerFunction和RouterFunction，同时webflux有如下特性：</p><ol><li>异步非阻塞</li><li>响应式(reactive)函数编程，纯lambda表达式</li><li>不仅仅是在Servlet容器中tomcat/jetty中运行，同时支持NIO的Netty和Undertow中，实际项目中，我们往往与spring-boot项目结合，我们跟进代码可以看看spring-boot是在什么时候创建的server<br>一、SpringApplication<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="hljs-keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="hljs-keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="hljs-keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">SpringBootExceptionReporter.class,</span><br><span class="line"><span class="hljs-keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="hljs-keyword">new</span> StartupInfoLogger(<span class="hljs-keyword">this</span>.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context);</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="hljs-keyword">null</span>);</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们只分析入口，其它代码暂时不管，找到refreshContext(context);这一行进去</p><p>二、ReactiveWebServerApplicationContext的refresh()<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.refresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">stopAndReleaseReactiveWebServer();</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、ReactiveWebServerApplicationContext的onRefresh()<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRefresh</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.onRefresh();</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">createWebServer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<span class="hljs-string">"Unable to start reactive web server"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>四、看到这里我们就找到入口方法了：createWebServer(),跟进去，找到NettyReactiveWebServerFactory中创建webserver<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> WebServer <span class="hljs-title">getWebServer</span><span class="hljs-params">(HttpHandler httpHandler)</span> </span>&#123;</span><br><span class="line">HttpServer httpServer = createHttpServer();</span><br><span class="line">ReactorHttpHandlerAdapter handlerAdapter = <span class="hljs-keyword">new</span> ReactorHttpHandlerAdapter(</span><br><span class="line">httpHandler);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> NettyWebServer(httpServer, handlerAdapter, <span class="hljs-keyword">this</span>.lifecycleTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到ReactorHttpHandlerAdapter这个类想必特别亲切，在开篇说过是spring-cloud-gateway的入口，createHttpServer方法的细节暂时没有去学习了，后续有时间去深入了解下</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>spring5的相关新特性也是在学习中，这一篇文章算是和springboot结合的入门吧，后续有时间再深入学习</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-cloud-gateway-的ReactorHttpHandlerAdapter&quot;&gt;&lt;a href=&quot;#spring-cloud-gateway-的ReactorHttpHandlerAdapter&quot; class=&quot;headerlink&quot; title=&quot;spring-cloud-gateway 的ReactorHttpHandlerAdapter&quot;&gt;&lt;/a&gt;spring-cloud-gateway 的ReactorHttpHandlerAdapter&lt;/h2&gt;&lt;p&gt;这几天看了看spring-cloud-gateway的请求处理流程，因为之前一直用的springboot1.x和spring4，一开始对spring-cloud-gateway的处理流程有点懵逼，找不到入口，后来跟了代码，在网上找了点资料，发现spring-cloud-gateway的入口在ReactorHttpHandlerAdapter的apply方法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>springcloud(一)——spring-cloud-alibaba集成rocketmq</title>
    <link href="https://www.zplxjj.com/2019/04/29/spring-cloud/"/>
    <id>https://www.zplxjj.com/2019/04/29/spring-cloud/</id>
    <published>2019-04-29T13:38:25.000Z</published>
    <updated>2019-04-29T13:55:57.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的工作中，微服务框架使用的是springcloud，消息中间件使用的rocketmq，这段时间看到阿里出了spring cloud alibaba集成了rocketmq，出于好奇，写了个demo</p><a id="more"></a><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ul><li>官方对 Spring Cloud Stream 的一段介绍：Spring Cloud Stream 是一个用于构建基于消息的微服务应用框架。基于 SpringBoot 创建具有生产级别的单机 Spring 应用，并且使用 Spring Integration 与 Broker 进行连接。</li><li>Binder ：Components responsible to provide integration with the external messaging systems.【与外部消息中间件进行集成】</li><li>Binding：Bridge between the external messaging systems and application provided Producers and Consumers of messages (created by the Destination Binders).【在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，开发者只需使用应用程序的 生产者或消费者生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。】</li><li>Message: The canonical data structure used by producers and consumers to communicate with Destination Binders (and thus other applications via external messaging systems).【生产者和消费者用于与目标绑定器通信的规范数据结构。】</li></ul><h2 id="快速在本地启动rocketmq"><a href="#快速在本地启动rocketmq" class="headerlink" title="快速在本地启动rocketmq"></a>快速在本地启动rocketmq</h2><p>第一步：下载：<a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-bin-release.zip" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-bin-release.zip</a><br>第二步：解压<br>第三步：修改三个配置文件：runbroker.sh,runserver.sh,tools.sh,将其中JAVA_HOME改成自己电脑的环境配置,修改完如下<br><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; JAVA_HOME=自己的地址</span><br><span class="line"><span class="hljs-comment">#[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; JAVA_HOME=/usr/java</span></span><br><span class="line">[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; error_exit <span class="hljs-string">"Please set the JAVA_HOME variable in your environment, We need java(x64)!"</span></span><br></pre></td></tr></table></figure></p><p>第四步：依次执行命令<br><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mqnamesrv</span><br><span class="line">./mqbroker -n localhost:9876</span><br><span class="line">./mqadmin updateTopic -n localhost:9876 -c DefaultCluster -t <span class="hljs-built_in">test</span>-topic</span><br></pre></td></tr></table></figure></p><p>如果启动成功，没有报错，代表启动成功哈，下面就可以开发了</p><h2 id="开发demo"><a href="#开发demo" class="headerlink" title="开发demo"></a>开发demo</h2><p>第一步：导入相关的pom<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"> <span class="hljs-comment">&lt;!-- 为了Endpoint 信息查看 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>metrics-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：建一个springboot项目，启动类如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-meta">@EnableBinding</span>(&#123; Source.class, Sink.class &#125;)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三步：创建provider<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RocketmqProducer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(String message)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        DefaultMQProducer producer = <span class="hljs-keyword">new</span> DefaultMQProducer(<span class="hljs-string">"test_producer_group"</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="hljs-string">"127.0.0.1:9876"</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        Message msg = <span class="hljs-keyword">new</span> Message(<span class="hljs-string">"test-topic"</span>, <span class="hljs-string">"test-tag"</span>, message.getBytes());</span><br><span class="line">        producer.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第四步：创建consumer<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReceiveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 默认是input，在Sink类中指定，如果想要多个input，需要写一个实现Sink的类</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> receiveMsg</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@StreamListener</span>(<span class="hljs-string">"input"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveInput1</span><span class="hljs-params">(String receiveMsg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"input receive: "</span> + receiveMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第五步：加入配置文件：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server.port=8087</span><br><span class="line">spring.application.name=spring-cloud-alibaba-rocketmq-demo</span><br><span class="line"></span><br><span class="line"># 配置rocketmq的nameserver地址</span><br><span class="line">spring.cloud.stream.rocketmq.binder.namesrv-addr=127.0.0.1:9876</span><br><span class="line"># 定义name为output的binding</span><br><span class="line">spring.cloud.stream.bindings.output.destination=test-topic</span><br><span class="line">spring.cloud.stream.bindings.output.content-type=application/json</span><br><span class="line">#定义name为input的binding</span><br><span class="line">spring.cloud.stream.bindings.input.destination=test-topic</span><br><span class="line">spring.cloud.stream.bindings.input.content-type=application/json</span><br><span class="line">spring.cloud.stream.bindings.input.group=test-group</span><br><span class="line"></span><br><span class="line">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure></p><p>第六步：写一个controller，启动项目，访问接口<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/api/demo/test"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    RocketmqProducer rocketmqProducer;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/send"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">send</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, RemotingException, MQClientException, MQBrokerException </span>&#123;</span><br><span class="line">        rocketmqProducer.send(<span class="hljs-string">"test rocketmq message"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>会看到控制台输出：input receive: test rocketmq message</p><h2 id="Endpoint-信息查看"><a href="#Endpoint-信息查看" class="headerlink" title="Endpoint 信息查看"></a>Endpoint 信息查看</h2><p>浏览器输入：<a href="http://127.0.0.1:8087/actuator/rocketmq-binder" target="_blank" rel="noopener">http://127.0.0.1:8087/actuator/rocketmq-binder</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这一篇文章只是将spring cloud stream 和 rocketmq跑通了，其实对于spring cloud stream和rocketmq还是学习的阶段，只能感叹spring cloud博大精深</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的工作中，微服务框架使用的是springcloud，消息中间件使用的rocketmq，这段时间看到阿里出了spring cloud alibaba集成了rocketmq，出于好奇，写了个demo&lt;/p&gt;
    
    </summary>
    
      <category term="springcloud" scheme="https://www.zplxjj.com/categories/springcloud/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(五)——springboot中的拦截器和过滤器小结</title>
    <link href="https://www.zplxjj.com/2019/04/27/springboot/"/>
    <id>https://www.zplxjj.com/2019/04/27/springboot/</id>
    <published>2019-04-27T06:11:41.000Z</published>
    <updated>2019-04-28T05:49:24.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于过滤器Filter和拦截器Interceptor，大家都不会陌生，从一开始的servelet，到springmvc，再到现在的springboot，都有接触到，记得刚接触的时候，会容易弄混淆，想写这篇文章做个小的总结<br><a id="more"></a></p><h2 id="拦截器和过滤器的异同"><a href="#拦截器和过滤器的异同" class="headerlink" title="拦截器和过滤器的异同"></a>拦截器和过滤器的异同</h2><ul><li>相同点<ol><li>都是aop编程思想的体现，可以在程序执行前后做一些操作，如权限操作，日志记录等</li></ol></li><li>不同点：<ol><li>Filter是Servlet规范中定义的，拦截器是Spring框架中的</li><li>触发时机不一样，过滤器是在请求进入容器后，但请求进入servlet之前进行预处理的</li><li>拦截器可以获取IOC容器中的各个bean，而过滤器就不行，拦截器归Spring管理</li></ol></li></ul><h2 id="Springboot实现过滤器和拦截器"><a href="#Springboot实现过滤器和拦截器" class="headerlink" title="Springboot实现过滤器和拦截器"></a>Springboot实现过滤器和拦截器</h2><p>第一步：定义Filter<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Slf</span>4j</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span></span><br><span class="line"><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"TestFilter filter。。。。。。。。"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二步：注入springboot容器当中<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Filter <span class="hljs-title">testFilter</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean&lt;TestFilter&gt; <span class="hljs-title">filterRegistrationBean1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;TestFilter&gt; filterRegistrationBean=<span class="hljs-keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        filterRegistrationBean.setFilter((TestFilter) testFilter());</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="hljs-string">"/*"</span>);</span><br><span class="line">        <span class="hljs-comment">//filterRegistrationBean.setOrder();多个filter的时候order的数值越小 则优先级越高</span></span><br><span class="line">        <span class="hljs-keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三步：定义拦截器<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Slf</span>4j</span><br><span class="line"><span class="hljs-meta">@Service</span>(value = <span class="hljs-string">"testInterceptor"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"TestInterceptor preHandle...."</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"TestInterceptor postHandle...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"TestInterceptor afterCompletion...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第四步：加入springboot容器<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    TestInterceptor testInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(testInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="hljs-string">"/api/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：这边用的springboot是2.0.x，采取的是直接实现WebMvcConfigurer，因为WebMvcConfigurerAdapter被标识了@Deprecated，就没有继承WebMvcConfigurerAdapter了<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span></span><br><span class="line"><span class="hljs-meta">@Deprecated</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WebMvcConfigurerAdapter</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第五步：还是启动之前的controller<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api/test"</span>)</span><br><span class="line"><span class="hljs-meta">@Slf</span>4j</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"test hello............."</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"SUCCESS"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>看到打印结果如下<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-04-27/12:01:04.603||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.filter.TestFilter 22 - TestFilter filter。。。。。。。。</span><br><span class="line">2019-04-27/12:01:04.612||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.interceptor.TestInterceptor 26 - TestInterceptor preHandle....</span><br><span class="line">2019-04-27/12:01:04.634||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.interceptor.TestInterceptor 32 - TestInterceptor postHandle....</span><br><span class="line">2019-04-27/12:01:04.634||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.interceptor.TestInterceptor 37 - TestInterceptor afterCompletion....</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>过滤器的实现基于回调函数。而拦截器（代理模式）的实现基于反射，代理又分静态代理和动态代理，动态代理是拦截器的简单实现。那何时使用拦截器？何时使用过滤器？</p><ul><li>如果是非spring项目，那么拦截器不能用，只能使用过滤器，这里说的拦截器是基于spring的拦截器。</li><li>如果是处理controller前后，既可以使用拦截器也可以使用过滤器，如果都使用了，注意前后顺序。</li><li>如果是处理dispaterServlet前后，只能使用过滤器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;关于过滤器Filter和拦截器Interceptor，大家都不会陌生，从一开始的servelet，到springmvc，再到现在的springboot，都有接触到，记得刚接触的时候，会容易弄混淆，想写这篇文章做个小的总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>与go邂逅(二)——基本程序结构</title>
    <link href="https://www.zplxjj.com/2019/04/26/%E4%B8%8Ego%E9%82%82%E9%80%85/"/>
    <id>https://www.zplxjj.com/2019/04/26/与go邂逅/</id>
    <published>2019-04-26T09:11:06.000Z</published>
    <updated>2019-05-01T09:18:52.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习一门语言的时候，难免从最简单的程序结构学起，这些东西在掌握了一门别的开发语言的情况(如大名鼎鼎的java)，就会显得如鱼得水了，下面会把我学习一些简单例子分享出来。<br><a id="more"></a></p><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><p>快速为一些变量赋值<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">NUM1 = <span class="hljs-number">1</span> + <span class="hljs-literal">iota</span></span><br><span class="line">NUM2</span><br><span class="line">NUM3</span><br><span class="line">NUM4</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//输出结果：1，2，4，8</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPrint</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(NUM1, NUM2, NUM3, NUM4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>快速的实现一些数值交换<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//数值交换</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestExchange</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//也可以这样定义变量：var aa int = 1</span></span><br><span class="line">a := <span class="hljs-number">1</span></span><br><span class="line">b := <span class="hljs-number">2</span></span><br><span class="line">t.Log(a, b)</span><br><span class="line">    <span class="hljs-comment">//交换数值</span></span><br><span class="line">b, a = a, b</span><br><span class="line">t.Log(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类型转换<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//给类型命名</span></span><br><span class="line"><span class="hljs-keyword">type</span> typeInt <span class="hljs-keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestInt</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int64</span> = <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int32</span> = <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-comment">//类型不可转</span></span><br><span class="line"><span class="hljs-comment">//a = b</span></span><br><span class="line"><span class="hljs-keyword">var</span> c = typeInt(<span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">t.Log(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现斐波拉切数列的两种方式<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//斐波拉切</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFibList</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span></span><br><span class="line">t.Log(a)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line">t.Log(b)</span><br><span class="line">tmp := a + b</span><br><span class="line">a = b</span><br><span class="line">b = tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//斐波拉切 递归</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFibRecursion</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(FibRecursion(<span class="hljs-number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FibRecursion</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> || i == <span class="hljs-number">2</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> FibRecursion(i<span class="hljs-number">-1</span>) + FibRecursion(i<span class="hljs-number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数组比较，和java不同，不是比较指针，可以比较值的<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//数组比较</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCompareArray</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">c := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">t.Log(a == b) <span class="hljs-comment">//false</span></span><br><span class="line">t.Log(a == c) <span class="hljs-comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>go也是有指针的，但是没有细看，只是写个例子看下结果<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPoint</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int64</span> = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">var</span> aPtr = &amp;a</span><br><span class="line">t.Log(a, aPtr)<span class="hljs-comment">// 1 0xc420018230</span></span><br><span class="line"><span class="hljs-comment">//打印类: int64 *int64</span></span><br><span class="line">t.Logf(<span class="hljs-string">"%T %T"</span>, a, aPtr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>string的默认值<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//默认值是"" 不是java的那种null</span></span><br><span class="line"><span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span></span><br><span class="line">t.Log(<span class="hljs-string">"+"</span> + str + <span class="hljs-string">"+"</span>)<span class="hljs-comment">//输出++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for循环<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//for循环 go当中原来没有while</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFor</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">n := <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//for循环实现冒泡排序</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestForSort</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4</span>,<span class="hljs-number">55</span>,<span class="hljs-number">11</span>&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(a)-i<span class="hljs-number">-1</span>; j++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> a[j] &gt; a[j+<span class="hljs-number">1</span>] &#123;</span><br><span class="line">tmp := a[j]</span><br><span class="line">a[j] = a[j+<span class="hljs-number">1</span>]</span><br><span class="line">a[j+<span class="hljs-number">1</span>] = tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.Log(a)<span class="hljs-comment">//[1 2 2 2 3 4 4 5 6 8 9 11 23 34 55]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>go当中的条件判断，写起来还是很爽的<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//比较</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCondition</span><span class="hljs-params">(t *testing.T)</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//可以条件结果赋值给变量</span></span><br><span class="line"><span class="hljs-keyword">if</span> a:=<span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>;a&#123;</span><br><span class="line">t.Log(<span class="hljs-string">"3&gt;2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// GOOS is the running program's operating system target:</span></span><br><span class="line"><span class="hljs-comment">// one of darwin, freebsd, linux, and so on.</span></span><br><span class="line"><span class="hljs-keyword">switch</span> runtime.GOOS&#123;</span><br><span class="line"><span class="hljs-comment">//自带break</span></span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"darwin"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"darwin"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"freebsd"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"freebsd"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"linux"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"linux"</span>)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">switch</span>  &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>&gt;<span class="hljs-number">2</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"4&gt;2"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>&lt;<span class="hljs-number">2</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"4&lt;2"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>string的默认值<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//默认值是"" 不是java的那种null</span></span><br><span class="line"><span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span></span><br><span class="line">t.Log(<span class="hljs-string">"+"</span> + str + <span class="hljs-string">"+"</span>)<span class="hljs-comment">//输出++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for循环<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//for循环 go当中原来没有while</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFor</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">n := <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//for循环实现冒泡排序</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestForSort</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4</span>,<span class="hljs-number">55</span>,<span class="hljs-number">11</span>&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(a)-i<span class="hljs-number">-1</span>; j++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> a[j] &gt; a[j+<span class="hljs-number">1</span>] &#123;</span><br><span class="line">tmp := a[j]</span><br><span class="line">a[j] = a[j+<span class="hljs-number">1</span>]</span><br><span class="line">a[j+<span class="hljs-number">1</span>] = tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.Log(a)<span class="hljs-comment">//[1 2 2 2 3 4 4 5 6 8 9 11 23 34 55]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>go当中的条件判断，写起来还是很爽的<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//比较</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCondition</span><span class="hljs-params">(t *testing.T)</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//可以条件结果赋值给变量</span></span><br><span class="line"><span class="hljs-keyword">if</span> a:=<span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>;a&#123;</span><br><span class="line">t.Log(<span class="hljs-string">"3&gt;2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// GOOS is the running program's operating system target:</span></span><br><span class="line"><span class="hljs-comment">// one of darwin, freebsd, linux, and so on.</span></span><br><span class="line"><span class="hljs-keyword">switch</span> runtime.GOOS&#123;</span><br><span class="line"><span class="hljs-comment">//自带break</span></span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"darwin"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"darwin"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"freebsd"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"freebsd"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"linux"</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"linux"</span>)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">switch</span>  &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>&gt;<span class="hljs-number">2</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"4&gt;2"</span>)</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>&lt;<span class="hljs-number">2</span>:</span><br><span class="line">t.Log(<span class="hljs-string">"4&lt;2"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>string的基本操作<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//分割:[a b c]</span></span><br><span class="line">s := <span class="hljs-string">"a,b,c"</span></span><br><span class="line">splitStr := strings.Split(s, <span class="hljs-string">","</span>)</span><br><span class="line">t.Log(splitStr)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//拼接:a:b:c</span></span><br><span class="line">stringJoin := strings.Join(splitStr, <span class="hljs-string">":"</span>)</span><br><span class="line">t.Log(stringJoin)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//整型转字符串</span></span><br><span class="line">str := strconv.Itoa(<span class="hljs-number">10</span>)</span><br><span class="line">t.Log(str)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//字符串转整型</span></span><br><span class="line"><span class="hljs-keyword">if</span> i, e := strconv.Atoi(<span class="hljs-string">"10"</span>); e == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map初始化<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestInitMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">m1 := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span>, <span class="hljs-number">5</span>: <span class="hljs-number">6</span>&#125;</span><br><span class="line">t.Log(m1[<span class="hljs-number">2</span>])</span><br><span class="line">t.Logf(<span class="hljs-string">"len m1=%d"</span>, <span class="hljs-built_in">len</span>(m1))</span><br><span class="line"></span><br><span class="line">m2 := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;&#125;</span><br><span class="line">m2[<span class="hljs-number">4</span>] = <span class="hljs-number">16</span></span><br><span class="line">t.Logf(<span class="hljs-string">"len m2=%d"</span>, <span class="hljs-built_in">len</span>(m2))</span><br><span class="line"></span><br><span class="line">m3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)</span><br><span class="line">t.Logf(<span class="hljs-string">"len m3=%d"</span>, <span class="hljs-built_in">len</span>(m3))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map判断key是否存在和循环<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestExistKey</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">m1 := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;&#125;</span><br><span class="line">t.Log(m1[<span class="hljs-number">1</span>])</span><br><span class="line">m1[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span></span><br><span class="line">t.Log(m1[<span class="hljs-number">2</span>])</span><br><span class="line">m1[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">if</span> v, ok := m1[<span class="hljs-number">3</span>]; ok &#123;</span><br><span class="line">t.Logf(<span class="hljs-string">"Key 3's value is %d"</span>, v)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Log(<span class="hljs-string">"key 3 is not existing."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestForMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">m1 := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">3</span>: <span class="hljs-number">9</span>&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m1 &#123;</span><br><span class="line">t.Log(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map当中的工厂模式<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFunc</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(op <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span>&#123;&#125;</span><br><span class="line">m[<span class="hljs-number">1</span>] = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(op <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; <span class="hljs-keyword">return</span> op &#125;</span><br><span class="line">m[<span class="hljs-number">2</span>] = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(op <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; <span class="hljs-keyword">return</span> op * op &#125;</span><br><span class="line">m[<span class="hljs-number">3</span>] = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(op <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; <span class="hljs-keyword">return</span> op * op * op &#125;</span><br><span class="line">t.Log(m[<span class="hljs-number">1</span>](<span class="hljs-number">2</span>), m[<span class="hljs-number">2</span>](<span class="hljs-number">2</span>), m[<span class="hljs-number">3</span>](<span class="hljs-number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>map模拟一个set<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMapForSet</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">mySet := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">bool</span>&#123;&#125;</span><br><span class="line">mySet[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span></span><br><span class="line">n := <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-comment">//判断是否存在</span></span><br><span class="line"><span class="hljs-keyword">if</span> mySet[n] &#123;</span><br><span class="line">t.Logf(<span class="hljs-string">"%d is existing"</span>, n)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Logf(<span class="hljs-string">"%d is not existing"</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">mySet[<span class="hljs-number">3</span>] = <span class="hljs-literal">true</span></span><br><span class="line">t.Log(<span class="hljs-built_in">len</span>(mySet))</span><br><span class="line"><span class="hljs-built_in">delete</span>(mySet, <span class="hljs-number">1</span>)</span><br><span class="line">n = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">if</span> mySet[n] &#123;</span><br><span class="line">t.Logf(<span class="hljs-string">"%d is existing"</span>, n)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Logf(<span class="hljs-string">"%d is not existing"</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程安全map<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//store:存储一个设置的键值</span></span><br><span class="line"><span class="hljs-comment">//LoadOrStore:返回键的现有值(如果存在)，否则存储并返回给定的值，如果是读取则返回true，如果是存储返回false</span></span><br><span class="line"><span class="hljs-comment">//Load:读取存储在map中的值，如果没有值，则返回nil。OK的结果表示是否在map中找到值。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSyncMap</span><span class="hljs-params">(t *testing.T)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">m := sync.Map&#123;&#125;</span><br><span class="line"></span><br><span class="line">v, ok := m.LoadOrStore(<span class="hljs-string">"1"</span>, <span class="hljs-string">"one"</span>)</span><br><span class="line">t.Log(v, ok) <span class="hljs-comment">//one false</span></span><br><span class="line"></span><br><span class="line">v, ok = m.Load(<span class="hljs-string">"2"</span>)</span><br><span class="line">t.Log(v, ok) <span class="hljs-comment">//nil false</span></span><br><span class="line"></span><br><span class="line">v, ok = m.LoadOrStore(<span class="hljs-string">"1"</span>, <span class="hljs-string">"oneone"</span>)</span><br><span class="line">t.Log(v, ok) <span class="hljs-comment">//one true</span></span><br><span class="line"></span><br><span class="line">v, ok = m.Load(<span class="hljs-string">"1"</span>)</span><br><span class="line">t.Log(v, ok) <span class="hljs-comment">//one true</span></span><br><span class="line"></span><br><span class="line">m.Store(<span class="hljs-string">"1"</span>, <span class="hljs-string">"oneone"</span>)</span><br><span class="line">v, ok = m.Load(<span class="hljs-string">"1"</span>)</span><br><span class="line">t.Log(v, ok) <span class="hljs-comment">// oneone true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习一门语言的时候，难免从最简单的程序结构学起，这些东西在掌握了一门别的开发语言的情况(如大名鼎鼎的java)，就会显得如鱼得水了，下面会把我学习一些简单例子分享出来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="https://www.zplxjj.com/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>与go邂逅(一)——go环境搭建和Helloworld(开发工具：GOLAND)</title>
    <link href="https://www.zplxjj.com/2019/04/25/%E4%B8%8Ego%E9%82%82%E9%80%85/"/>
    <id>https://www.zplxjj.com/2019/04/25/与go邂逅/</id>
    <published>2019-04-25T07:19:17.000Z</published>
    <updated>2019-04-30T14:52:35.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>学习语言，搭建环境必不可少，虽然网上教程也很多，但是我也记录下我的mac上面环境配置</p><ol><li>从网上下载安装文件，下载地址：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></li><li>mac 有自带的pkg文件，但是我选择的是go1.12.4.darwin-amd64.tar.gz</li><li>下载下来解压即可，会有个命名为go的文件夹<a id="more"></a></li><li>配置环境变量，修改/etc/profile(<strong>全局的</strong>)或者.bash_profile(<strong>私有的</strong>)即可，配置完执行下source，我的配置如下：<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=$HOME/go_dev/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">export GOPATH=$HOME/code/personal/code/go_project</span><br></pre></td></tr></table></figure></li></ol><p>配置完，执行go version查看安装是否成功</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>没有做过比较，只是之前写java的时候用的idea，所以用了goland，它们都是一家公司的，挺好用</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p> 新建一个项目，配置好路径<img src="/2019/04/25/与go邂逅/2019-04-25-15-00-36.png" alt><br>2如图所以创建三个目录<img src="/2019/04/25/与go邂逅/2019-04-25-15-02-04.png" alt><br>创建以.go为结尾的文件，命名随意<img src="/2019/04/25/与go邂逅/2019-04-25-15-03-19.png" alt><br>写一个hello world 执行下:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写到这里，其实go语言环境就跑通了，其实我们在写java项目的时候，都会有单元测试类，其实go当中也有，只要遵循一定的写法就可以了，我们首先见一个目录：<br><img src="/2019/04/25/与go邂逅/2019-04-25-15-16-42.png" alt><br>文件名称需要以_test结尾，代码如下：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//方法名以Test开头，加入参数，*testing.T t</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPrint</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(<span class="hljs-string">"test hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;学习语言，搭建环境必不可少，虽然网上教程也很多，但是我也记录下我的mac上面环境配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从网上下载安装文件，下载地址：&lt;a href=&quot;https://golang.google.cn/dl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://golang.google.cn/dl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mac 有自带的pkg文件，但是我选择的是go1.12.4.darwin-amd64.tar.gz&lt;/li&gt;
&lt;li&gt;下载下来解压即可，会有个命名为go的文件夹&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="go" scheme="https://www.zplxjj.com/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(四)——@EnableConfigurationProperties是如何起作用的你知道吗</title>
    <link href="https://www.zplxjj.com/2019/04/24/springboot-2/"/>
    <id>https://www.zplxjj.com/2019/04/24/springboot-2/</id>
    <published>2019-04-24T14:40:58.000Z</published>
    <updated>2019-04-28T05:49:24.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用springboot开发的过程中，我们会用到<strong>@ConfigurationProperties</strong>注解，主要是用来把properties或者yml配置文件转化为bean来使用的，而<strong>@EnableConfigurationProperties</strong>注解的作用是@ConfigurationProperties注解生效。<br>如果只配置@ConfigurationProperties注解，在IOC容器中是获取不到properties配置文件转化的bean的，当然在@ConfigurationProperties加入注解的类上加@Component也可以使交于springboot管理。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><a id="more"></a><p><strong>第一步：</strong>创建一个类TestConfigurationProperties<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"properties"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConfigurationProperties</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>得加上set和get方法<br><strong>第二步：</strong>创建TestAutoConfiguration类<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-meta">@EnableConfigurationProperties</span>(TestConfigurationProperties.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> TestConfigurationProperties testConfigurationProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestAutoConfiguration</span><span class="hljs-params">(TestConfigurationProperties testConfigurationProperties)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.testConfigurationProperties = testConfigurationProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">        user.setName(testConfigurationProperties.getName());</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>得创建一个有参构造方法<br><strong>第三步：</strong>配置文件加入属性<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties.name=test</span><br></pre></td></tr></table></figure></p><p><strong>第四步：</strong>跑一下，打印出User这个类<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api/test"</span>)</span><br><span class="line"><span class="hljs-meta">@Slf</span>4j</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    TestConfigurationProperties testConfigurationProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/testConfigurationProperties"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testConfigurationProperties</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"test testConfigurationProperties.............&#123;&#125;"</span>, testConfigurationProperties.getName());</span><br><span class="line">        log.info(<span class="hljs-string">"user:&#123;&#125;"</span>, user);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"SUCCESS"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制台输出：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-04-21/16:11:36.638||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.controller.TestController 37 - test testConfigurationProperties.............test</span><br><span class="line">2019-04-21/16:11:36.639||||||||^_^|[http-nio-8088-exec-1] INFO  com.stone.zplxjj.controller.TestController 38 - user:User(id=null, name=test)</span><br></pre></td></tr></table></figure></p><h2 id="EnableConfigurationProperties是怎么加载的"><a href="#EnableConfigurationProperties是怎么加载的" class="headerlink" title="@EnableConfigurationProperties是怎么加载的"></a>@EnableConfigurationProperties是怎么加载的</h2><p>通过查看@EnableConfigurationProperties的注解：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-meta">@Import</span>(EnableConfigurationPropertiesImportSelector.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Convenient way to quickly register &#123;<span class="hljs-doctag">@link</span> ConfigurationProperties&#125; annotated beans</span></span><br><span class="line"><span class="hljs-comment"> * with Spring. Standard Spring Beans will also be scanned regardless of this value.</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ConfigurationProperties&#125; annotated beans to register</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过分析自动配置可以知道，肯定是这个类EnableConfigurationPropertiesImportSelector起的作用：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] IMPORTS = &#123;</span><br><span class="line">ConfigurationPropertiesBeanRegistrar.class.getName(),</span><br><span class="line">ConfigurationPropertiesBindingPostProcessorRegistrar.class.getName() &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> IMPORTS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>selectImports方法返回了这两个类：ConfigurationPropertiesBeanRegistrar和ConfigurationPropertiesBindingPostProcessorRegistrar，是何时加载的，我们只需要看这个类ConfigurationPropertiesBeanRegistrar即可：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigurationPropertiesBeanRegistrar</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">getTypes(metadata).forEach((type) -&gt; register(registry,</span><br><span class="line">(ConfigurableListableBeanFactory) registry, type));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-comment">//找到加入这个注解@EnableConfigurationProperties里面的value值，其实就是类class</span></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;Class&lt;?&gt;&gt; getTypes(AnnotationMetadata metadata) &#123;</span><br><span class="line">MultiValueMap&lt;String, Object&gt; attributes = metadata</span><br><span class="line">.getAllAnnotationAttributes(</span><br><span class="line">EnableConfigurationProperties.class.getName(), <span class="hljs-keyword">false</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> collectClasses((attributes != <span class="hljs-keyword">null</span>) ? attributes.get(<span class="hljs-string">"value"</span>)</span><br><span class="line">: Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;Class&lt;?&gt;&gt; collectClasses(List&lt;?&gt; values) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> values.stream().flatMap((value) -&gt; Arrays.stream((Object[]) value))</span><br><span class="line">.map((o) -&gt; (Class&lt;?&gt;) o).filter((type) -&gt; <span class="hljs-keyword">void</span>.class != type)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">      <span class="hljs-comment">//注册方法：根据找到的类名name和type，将加入注解@ConfigurationProperties的类加入spring容器里面</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ConfigurableListableBeanFactory beanFactory, Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">String name = getName(type);</span><br><span class="line"><span class="hljs-keyword">if</span> (!containsBeanDefinition(beanFactory, name)) &#123;</span><br><span class="line">registerBeanDefinition(registry, name, type);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-comment">//找到加入注解@ConfigurationProperties的类的名称，加入一定格式的拼接</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getName</span><span class="hljs-params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">ConfigurationProperties annotation = AnnotationUtils.findAnnotation(type,</span><br><span class="line">ConfigurationProperties.class);</span><br><span class="line">String prefix = (annotation != <span class="hljs-keyword">null</span>) ? annotation.prefix() : <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> (StringUtils.hasText(prefix) ? prefix + <span class="hljs-string">"-"</span> + type.getName()</span><br><span class="line">: type.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsBeanDefinition</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ConfigurableListableBeanFactory beanFactory, String name)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (beanFactory.containsBeanDefinition(name)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">BeanFactory parent = beanFactory.getParentBeanFactory();</span><br><span class="line"><span class="hljs-keyword">if</span> (parent <span class="hljs-keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> containsBeanDefinition((ConfigurableListableBeanFactory) parent,</span><br><span class="line">name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinition</span><span class="hljs-params">(BeanDefinitionRegistry registry, String name,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">assertHasAnnotation(type);</span><br><span class="line">GenericBeanDefinition definition = <span class="hljs-keyword">new</span> GenericBeanDefinition();</span><br><span class="line">definition.setBeanClass(type);</span><br><span class="line">registry.registerBeanDefinition(name, definition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertHasAnnotation</span><span class="hljs-params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">Assert.notNull(</span><br><span class="line">AnnotationUtils.findAnnotation(type, ConfigurationProperties.class),</span><br><span class="line">() -&gt; <span class="hljs-string">"No "</span> + ConfigurationProperties.class.getSimpleName()</span><br><span class="line">+ <span class="hljs-string">" annotation found on  '"</span> + type.getName() + <span class="hljs-string">"'."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>另外还有这个类：ConfigurationPropertiesBindingPostProcessorRegistrar，刚刚没有分析，看了下源码，其实他做的事情就是将配置文件当中的属性值赋予到加了@ConfigurationProperties的注解的类的属性上，具体就不分析了，有兴趣自己可以阅读，入口知道了，就简单了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用springboot开发的过程中，我们会用到&lt;strong&gt;@ConfigurationProperties&lt;/strong&gt;注解，主要是用来把properties或者yml配置文件转化为bean来使用的，而&lt;strong&gt;@EnableConfigurationProperties&lt;/strong&gt;注解的作用是@ConfigurationProperties注解生效。&lt;br&gt;如果只配置@ConfigurationProperties注解，在IOC容器中是获取不到properties配置文件转化的bean的，当然在@ConfigurationProperties加入注解的类上加@Component也可以使交于springboot管理。&lt;/p&gt;
&lt;h2 id=&quot;举个栗子&quot;&gt;&lt;a href=&quot;#举个栗子&quot; class=&quot;headerlink&quot; title=&quot;举个栗子&quot;&gt;&lt;/a&gt;举个栗子&lt;/h2&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(三)——application.properties和application.yml是何时解析的</title>
    <link href="https://www.zplxjj.com/2019/04/24/springboot-1/"/>
    <id>https://www.zplxjj.com/2019/04/24/springboot-1/</id>
    <published>2019-04-24T14:39:17.000Z</published>
    <updated>2019-04-28T05:49:24.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用过的springboot的小伙伴都知道springboot不需要再像springmvc引入那么多的配置文件，只需要加入application.properties或者application.yml即可，比如在上一篇文章讲到数据库的配置，只需要在文件引入如下的配置即可：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/zplxjj?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=@ZPLxjj12345</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p><p>下面简单介绍下springboot在启动的时候是在何时读取的properties和yml文件的内容的<br><a id="more"></a></p><h2 id="实现一个简单的自定义监听器"><a href="#实现一个简单的自定义监听器" class="headerlink" title="实现一个简单的自定义监听器"></a>实现一个简单的自定义监听器</h2><p><strong>第一步：</strong>定义一个event，继承ApplicationEvent<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerApplicationEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomerApplicationEvent</span><span class="hljs-params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(source);</span><br><span class="line">        System.out.println(<span class="hljs-string">"CustomerApplicationEvent constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二步：</strong>定义一个listener<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationListener</span>&lt;<span class="hljs-title">CustomerApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEvent</span><span class="hljs-params">(CustomerApplicationEvent customerApplicationEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"customerApplicationEvent:"</span>+customerApplicationEvent.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第三步：</strong>注册监听器<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);</span><br><span class="line">        <span class="hljs-comment">// 注册 CustomerApplicationListener 事件监听器</span></span><br><span class="line">        context.addApplicationListener(<span class="hljs-keyword">new</span> CustomerApplicationListener());</span><br><span class="line">        <span class="hljs-comment">// 发布 CustomerApplicationEvent 事件</span></span><br><span class="line">        context.publishEvent(<span class="hljs-keyword">new</span> CustomerApplicationEvent(<span class="hljs-keyword">new</span> Object()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动项目后，会发现控制台输出了：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerApplicationEvent constructor...</span><br><span class="line">customerApplicationEvent:com.stone.zplxjj.event.CustomerApplicationEvent</span><br></pre></td></tr></table></figure></p><h2 id="springboot自带的事件"><a href="#springboot自带的事件" class="headerlink" title="springboot自带的事件"></a>springboot自带的事件</h2><ul><li>ApplicationStartingEvent：应用启动事件，在调用 SpringApplication.run() 方法之前，可以从中获取到 SpringApplication 对象，进行一些启动前设置。</li><li><strong>ApplicationEnvironmentPreparedEvent：Environment准备完成事件，此时可以从中获取到 Environment 对象并对其中的配置项进行查看或者修改</strong>。</li><li>ApplicationPreparedEvent：ApplicationContext准备完成事件，接下来 Spring 就能够向容器中加载 Bean 了 。</li><li>ApplicationReadyEvent：应用准备完成事件，预示着应用可以接收和处理请求了。</li><li>ApplicationFailedEvent：应用启动失败事件，可以从中捕获到启动失败的异常信息进行相应处理，例如：添加虚拟机对应的钩子进行资源的回收与释放。</li></ul><h2 id="读取配置代码入口：ApplicationEnvironmentPreparedEvent和ConfigFileApplicationListener"><a href="#读取配置代码入口：ApplicationEnvironmentPreparedEvent和ConfigFileApplicationListener" class="headerlink" title="读取配置代码入口：ApplicationEnvironmentPreparedEvent和ConfigFileApplicationListener"></a>读取配置代码入口：ApplicationEnvironmentPreparedEvent和ConfigFileApplicationListener</h2><p>加载配置文件需要用到ConfigFileApplicationListener，其代码如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEvent</span><span class="hljs-params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</span><br><span class="line">onApplicationEnvironmentPreparedEvent(</span><br><span class="line">(ApplicationEnvironmentPreparedEvent) event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> ApplicationPreparedEvent) &#123;</span><br><span class="line">onApplicationPreparedEvent(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入方法：onApplicationEnvironmentPreparedEvent<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onApplicationEnvironmentPreparedEvent</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class="line">List&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</span><br><span class="line">postProcessors.add(<span class="hljs-keyword">this</span>);</span><br><span class="line">AnnotationAwareOrderComparator.sort(postProcessors);</span><br><span class="line"><span class="hljs-keyword">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">postProcessor.postProcessEnvironment(event.getEnvironment(),</span><br><span class="line">event.getSpringApplication());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入postProcessor.postProcessEnvironment：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">//类：ConfigFileApplicationListener</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">SpringApplication application)</span> </span>&#123;</span><br><span class="line">addPropertySources(environment, application.getResourceLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入addPropertySources<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addPropertySources</span><span class="hljs-params">(ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">       <span class="hljs-comment">//将随机方法放入到PropertySources中</span></span><br><span class="line">RandomValuePropertySource.addToEnvironment(environment);</span><br><span class="line">       <span class="hljs-comment">//load加载</span></span><br><span class="line"><span class="hljs-keyword">new</span> Loader(environment, resourceLoader).load();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入load方法：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.profiles = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="hljs-keyword">this</span>.processedProfiles = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="hljs-keyword">this</span>.activatedProfiles = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-keyword">this</span>.loaded = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">initializeProfiles();</span><br><span class="line"><span class="hljs-keyword">while</span> (!<span class="hljs-keyword">this</span>.profiles.isEmpty()) &#123;</span><br><span class="line">Profile profile = <span class="hljs-keyword">this</span>.profiles.poll();</span><br><span class="line"><span class="hljs-keyword">if</span> (profile != <span class="hljs-keyword">null</span> &amp;&amp; !profile.isDefaultProfile()) &#123;</span><br><span class="line">addProfileToEnvironment(profile.getName());</span><br><span class="line">&#125;</span><br><span class="line">load(profile, <span class="hljs-keyword">this</span>::getPositiveProfileFilter,</span><br><span class="line">addToLoaded(MutablePropertySources::addLast, <span class="hljs-keyword">false</span>));</span><br><span class="line"><span class="hljs-keyword">this</span>.processedProfiles.add(profile);</span><br><span class="line">&#125;</span><br><span class="line">resetEnvironmentProfiles(<span class="hljs-keyword">this</span>.processedProfiles);</span><br><span class="line">load(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">this</span>::getNegativeProfileFilter,</span><br><span class="line">addToLoaded(MutablePropertySources::addFirst, <span class="hljs-keyword">true</span>));</span><br><span class="line">addLoadedPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入字方法load<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">(Profile profile, DocumentFilterFactory filterFactory,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">DocumentConsumer consumer)</span> </span>&#123;</span><br><span class="line">getSearchLocations().forEach((location) -&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">boolean</span> isFolder = location.endsWith(<span class="hljs-string">"/"</span>);</span><br><span class="line">Set&lt;String&gt; names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;</span><br><span class="line">names.forEach(</span><br><span class="line">(name) -&gt; load(location, name, profile, filterFactory, consumer));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>getSearchLocations():首先看CONFIG_LOCATION_PROPERTY，是否存在配置，无则走默认配置路径DEFAULT_SEARCH_LOCATIONS</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * The "config location" property name.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CONFIG_LOCATION_PROPERTY = <span class="hljs-string">"spring.config.location"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Note the order is from least to most specific (last one wins)</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SEARCH_LOCATIONS = <span class="hljs-string">"classpath:/,classpath:/config/,file:./,file:./config/"</span>;</span><br></pre></td></tr></table></figure></li><li><p>getSearchNames():首先看CONFIG_NAME_PROPERTY(spring.config.name)配置，否则走DEFAULT_NAMES(application)</p></li></ul><p><strong>spring.config.name说明：</strong>假如你不喜欢“application.properties”这个默认文件名，你可以重新设定：spring.config.name属性直接指定属性文件名称，spring.config.location属性指定明确路径，但是要注意不能写在application.properties文件里，这样会不起作用，可以写在java -jar xxx.jar –spring.config.name=custom.properties,还可以通过环境变量等方式,yml文件也可以这样</p><p>真正加载配置文件的方法：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">(String location, String name, Profile profile,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (PropertySourceLoader loader : <span class="hljs-keyword">this</span>.propertySourceLoaders) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (canLoadFileExtension(loader, location)) &#123;</span><br><span class="line">load(loader, location, profile,</span><br><span class="line">filterFactory.getDocumentFilter(profile), consumer);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;String&gt; processed = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="hljs-keyword">for</span> (PropertySourceLoader loader : <span class="hljs-keyword">this</span>.propertySourceLoaders) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (processed.add(fileExtension)) &#123;</span><br><span class="line">loadForFileExtension(loader, location + name, <span class="hljs-string">"."</span> + fileExtension,</span><br><span class="line">profile, filterFactory, consumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>loader.getFileExtensions():获取所有支持的文件后缀,loader初始化如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.propertySourceLoaders = SpringFactoriesLoader.loadFactories(</span><br><span class="line">PropertySourceLoader.class, getClass().getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过加载jar:spring-boot-2.1.4.RELEASE.jar:META-INF/spring.factories文件下对应内容：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># PropertySource Loaders</span><br><span class="line">org.springframework.boot.env.PropertySourceLoader=\</span><br><span class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span><br><span class="line">org.springframework.boot.env.YamlPropertySourceLoader</span><br></pre></td></tr></table></figure></p><p>从这里我们可以看到，通过PropertiesPropertySourceLoader和YamlPropertySourceLoader<br>加载配置文件，具体源码没有细看了，有兴趣自行阅读吧</p><p>加载完配置文件，调用方法：addLoadedPropertySources()</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，springboot加载properties和yml的入口就分析到这里了，细节上肯定不能面面俱到，但是入口知道了，后面就好分析了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用过的springboot的小伙伴都知道springboot不需要再像springmvc引入那么多的配置文件，只需要加入application.properties或者application.yml即可，比如在上一篇文章讲到数据库的配置，只需要在文件引入如下的配置即可：&lt;br&gt;&lt;figure class=&quot;highlight xml hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.url=jdbc:mysql://127.0.0.1:3306/zplxjj?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;serverTimezone=GMT%2B8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.username=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.password=@ZPLxjj12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面简单介绍下springboot在启动的时候是在何时读取的properties和yml文件的内容的&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(二)——springboot自动配置解析</title>
    <link href="https://www.zplxjj.com/2019/04/24/springboot/"/>
    <id>https://www.zplxjj.com/2019/04/24/springboot/</id>
    <published>2019-04-24T14:32:51.000Z</published>
    <updated>2019-04-28T05:49:24.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用过springboot的同学肯定很熟悉，它其中有个重要的特性，就是自动配置(平时习惯的一些设置的配置作为默认配置)。springboot提倡无XML配置文件的理念，使用springboot生成的应用完全不会生成任何配置代码与XML配置文件。下面先看一个springboot集成mybatis的例子。<br><strong>第一步：</strong> 引入pom文件<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>第二步：</strong> 因为我使用的xml配置文件去使用mybatis，在application.properties文件加入如下配置：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#指定mapper文件位置</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line"></span><br><span class="line">#数据源信息</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/zplxjj?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p><p><strong>第三步：</strong> 加入实体类、dao、mapper文件<br><img src="/2019/04/24/springboot/springboot011.png" alt><br><strong>第四步：</strong>启动类上面加入注解<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-meta">@MapperScan</span>(<span class="hljs-string">"com.stone.zplxjj.dao"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第五步：</strong>至此，配置完成，只需要写个单侧，springboot已经完美集成mybatis<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="hljs-meta">@SpringBootTest</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMybatis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(userMapper.selectByPrimaryKey(<span class="hljs-number">1L</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>通过上面的例子，我们发现集成mybatis特别简单，那些繁琐的类的注入都没有写，只需要加入数据库的一些配置即可，那这其中@EnableAutoConfiguration功不可没。@EnableAutoConfiguration 注解已经在@SpringBootApplication里面了<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-meta">@Inherited</span></span><br><span class="line"><span class="hljs-meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="hljs-meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="hljs-meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="hljs-meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="hljs-meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="hljs-meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="hljs-string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="hljs-string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们看到@EnableAutoConfiguration结构如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-meta">@Inherited</span></span><br><span class="line"><span class="hljs-meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="hljs-meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="hljs-string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这其中起作用的一个重要注解@Import，这个Spring提供的一个注解，可以导入配置类或者Bean到当前类中，我们进入到AutoConfigurationImportSelector类中查看，方法太长，截取核心的两个方法：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="hljs-keyword">this</span>.beanClassLoader);</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="hljs-keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        <span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">protected</span> AutoConfigurationImportSelector.<span class="hljs-function">AutoConfigurationEntry <span class="hljs-title">getAutoConfigurationEntry</span><span class="hljs-params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        AnnotationAttributes attributes = <span class="hljs-keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations = <span class="hljs-keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations = <span class="hljs-keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions = <span class="hljs-keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        <span class="hljs-keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations = <span class="hljs-keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">        <span class="hljs-keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过项目启动后，打上注解，可以看到MybatisAutoConfiguration引入了进来<br><img src="/2019/04/24/springboot/springboot012.png" alt><br>而MybatisAutoConfiguration能引入进来，其实是在mybatis-spring-boot-autoconfigure-2.0.1.jar包里面的spring.factories指定的,通过调用SpringFactoriesLoader.loadFactoryNames()来扫描加载含有META-INF/spring.factories文件的jar包，从而标识哪些自动配置的类<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span><br></pre></td></tr></table></figure></p><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p>@Conditional 的作用，可以根据条件去加载特定的bean，原理这边不做探讨，springboot基于此实现了几个注解，比较方便的实现条件加载类<br><strong>@ConditionalOnBean：</strong>Spring容器中是否存在对应的实例<br><strong>@ConditionalOnMissingBean：</strong>Spring容器中是否缺少对应的实例<br>通过查看MybatisAutoConfiguration中的SqlSessionFactory的写法<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSessionFactoryBean factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    factory.setDataSource(dataSource);</span><br><span class="line">    factory.setVfs(SpringBootVFS.class);</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-keyword">this</span>.properties.getConfigLocation())) &#123;</span><br><span class="line">        factory.setConfigLocation(<span class="hljs-keyword">this</span>.resourceLoader.getResource(<span class="hljs-keyword">this</span>.properties.getConfigLocation()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.applyConfiguration(factory);</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.properties.getConfigurationProperties() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        factory.setConfigurationProperties(<span class="hljs-keyword">this</span>.properties.getConfigurationProperties());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(<span class="hljs-keyword">this</span>.interceptors)) &#123;</span><br><span class="line">        factory.setPlugins(<span class="hljs-keyword">this</span>.interceptors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.databaseIdProvider != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        factory.setDatabaseIdProvider(<span class="hljs-keyword">this</span>.databaseIdProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.hasLength(<span class="hljs-keyword">this</span>.properties.getTypeAliasesPackage())) &#123;</span><br><span class="line">        factory.setTypeAliasesPackage(<span class="hljs-keyword">this</span>.properties.getTypeAliasesPackage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.properties.getTypeAliasesSuperType() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        factory.setTypeAliasesSuperType(<span class="hljs-keyword">this</span>.properties.getTypeAliasesSuperType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.hasLength(<span class="hljs-keyword">this</span>.properties.getTypeHandlersPackage())) &#123;</span><br><span class="line">        factory.setTypeHandlersPackage(<span class="hljs-keyword">this</span>.properties.getTypeHandlersPackage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(<span class="hljs-keyword">this</span>.properties.resolveMapperLocations())) &#123;</span><br><span class="line">        factory.setMapperLocations(<span class="hljs-keyword">this</span>.properties.resolveMapperLocations());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> factory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过上面分析mybatis如何集成springboot，知道了springboot入口在哪里以及如何实现的自动配置，这里只是简单的做了介绍，其中的一些源码和细节就没有分析了，我相信，入口知道了，接下来就好抠细节了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用过springboot的同学肯定很熟悉，它其中有个重要的特性，就是自动配置(平时习惯的一些设置的配置作为默认配置)。springboot提倡无XML配置文件的理念，使用springboot生成的应用完全不会生成任何配置代码与XML配置文件。下面先看一个springboot集成mybatis的例子。&lt;br&gt;&lt;strong&gt;第一步：&lt;/strong&gt; 引入pom文件&lt;br&gt;&lt;figure class=&quot;highlight xml hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.47&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot(一)——搭建属于自己的springboot项目</title>
    <link href="https://www.zplxjj.com/2019/04/16/springboot/"/>
    <id>https://www.zplxjj.com/2019/04/16/springboot/</id>
    <published>2019-04-16T14:46:15.000Z</published>
    <updated>2019-04-28T05:49:24.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="idea使用spring-Initalizr-快速构建spring-boot"><a href="#idea使用spring-Initalizr-快速构建spring-boot" class="headerlink" title="idea使用spring Initalizr 快速构建spring boot"></a>idea使用spring Initalizr 快速构建spring boot</h2><ol><li>点击新建项目,选择如图所示<a id="more"></a><img src="/2019/04/16/springboot/springboot001.png" alt></li><li>点击next后<img src="/2019/04/16/springboot/springboot002.png" alt></li><li>点击next，之后按照图中所示选择<img src="/2019/04/16/springboot/springboot003.png" alt></li><li>选择路径<img src="/2019/04/16/springboot/springboot004.png" alt></li><li>点击完成，如图所示，删除自己不想要的，项目构建完成<img src="/2019/04/16/springboot/springboot005.png" alt></li><li>构建一个controller，启动项目就可以看到返回结果了<br><img src="/2019/04/16/springboot/springboot006.png" alt></li></ol><h2 id="在自己的服务器搭建自己的springboot项目"><a href="#在自己的服务器搭建自己的springboot项目" class="headerlink" title="在自己的服务器搭建自己的springboot项目"></a>在自己的服务器搭建自己的springboot项目</h2><h3 id="使用idea向远程服务传递项目"><a href="#使用idea向远程服务传递项目" class="headerlink" title="使用idea向远程服务传递项目"></a>使用idea向远程服务传递项目</h3><ol><li>设置idea<img src="/2019/04/16/springboot/springboot007.png" alt></li><li>配置相关信息<img src="/2019/04/16/springboot/springboot008.png" alt></li><li>上传到指定机器<img src="/2019/04/16/springboot/2019-04-17-00-09-25.png" alt></li></ol><h3 id="配置启动脚本，基于java-jar命令"><a href="#配置启动脚本，基于java-jar命令" class="headerlink" title="配置启动脚本，基于java -jar命令"></a>配置启动脚本，基于java -jar命令</h3><ul><li><p>start.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">nohup java -jar target/zplxjj.jar  &amp;</span><br></pre></td></tr></table></figure></li><li><p>stop.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">PID=$(ps -ef | grep target/zplxjj.jar | grep -v grep | awk &apos;&#123; print $2 &#125;&apos;)</span><br><span class="line">if [ -z &quot;$PID&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo Application is already stopped</span><br><span class="line">else</span><br><span class="line">    echo kill $PID</span><br><span class="line">    kill $PID</span><br><span class="line">fi</span><br><span class="line">~</span><br></pre></td></tr></table></figure></li><li><p>run.sh</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo stop application</span><br><span class="line">source stop.sh</span><br><span class="line">echo start application</span><br><span class="line">source start.sh</span><br></pre></td></tr></table></figure></li></ul><p>启动自己的项目只需要执行run.sh就行，一个自己的spring boot就搭建起来了</p><h2 id="logback配置"><a href="#logback配置" class="headerlink" title="logback配置"></a>logback配置</h2><p>实际项目中，我们希望日志可以记录在服务器上面，这边用的是logback，是springboot自带的，我这边集成方式是加入logback-spring.xml文件，加入后启动项目即可，文件内容如下：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--用来定义变量值的标签--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_HOME"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"./logs"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"encoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度；%M:%L是方法和行号；%msg是日志消息；%n是换行符--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"normal-pattern"</span></span></span><br><span class="line"><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">"%d&#123;yyyy-MM-dd/HH:mm:ss.SSS&#125;|%X&#123;localIp&#125;|%X&#123;requestId&#125;|%X&#123;requestSeq&#125;|%X&#123;country&#125;|%X&#123;deviceType&#125;|%X&#123;deviceId&#125;|%X&#123;userId&#125;|^_^|[%t] %-5level %logger&#123;50&#125; %line - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"plain-pattern"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"%d&#123;yyyy-MM-dd.HH:mm:ss&#125; %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/zplxjj.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">Append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Append</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;normal-pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--按时间分割--&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/zplxjj.log.%d&#123;yyyy-MM-dd&#125;.%i<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>128MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>32GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!--控制台输出--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"STDOUT"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;normal-pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!-- log file error --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ERROR"</span></span></span><br><span class="line"><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/zplxjj-error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">Append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Append</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;normal-pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/zplxjj-error.log.%d&#123;yyyy-MM-dd&#125;.%i<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>128MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>32GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"FILE"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如图：<br><img src="/2019/04/16/springboot/springboot010.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;idea使用spring-Initalizr-快速构建spring-boot&quot;&gt;&lt;a href=&quot;#idea使用spring-Initalizr-快速构建spring-boot&quot; class=&quot;headerlink&quot; title=&quot;idea使用spring Initalizr 快速构建spring boot&quot;&gt;&lt;/a&gt;idea使用spring Initalizr 快速构建spring boot&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;点击新建项目,选择如图所示&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://www.zplxjj.com/categories/springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>redis分布式锁——简单实现</title>
    <link href="https://www.zplxjj.com/2019/04/03/redis/"/>
    <id>https://www.zplxjj.com/2019/04/03/redis/</id>
    <published>2019-04-03T08:32:01.000Z</published>
    <updated>2019-04-28T05:49:24.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目当中需要处理分布式系统中的并发问题，自然地想到了引入分布式锁，本文旨在讲述用redis简单的实现分布式锁，对于复杂的类似于redis集群问题、为什么不用zk等，自己也在学习，希望可以以后有机会分享<br><a id="more"></a></p><h2 id="分布式锁的可靠性保证"><a href="#分布式锁的可靠性保证" class="headerlink" title="分布式锁的可靠性保证"></a>分布式锁的可靠性保证</h2><ol><li>在过期时间内，只有一个客户端持有锁</li><li>在客户端持有锁期间短暂崩溃或者redis发生短暂崩溃时，不会有死锁状态</li><li>加锁和解锁必须是同一客户端，加锁和解锁必须是同一个客户端</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>项目当中的实现<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">lock</span><span class="hljs-params">(String key)</span> </span>&#123;</span><br><span class="line">    Long nowTIme = System.nanoTime();</span><br><span class="line">    <span class="hljs-comment">//TIMEOUT_NANO：超时时间</span></span><br><span class="line">    <span class="hljs-keyword">while</span> (TIMEOUT_NANO &gt; System.nanoTime() - nowTIme) &#123;</span><br><span class="line">        <span class="hljs-keyword">long</span> expires = System.nanoTime() + EXPIRE_NANO;</span><br><span class="line">        <span class="hljs-comment">//锁到期时间</span></span><br><span class="line">        String expiresStr = String.valueOf(expires);</span><br><span class="line">        <span class="hljs-comment">//putIfAbsent: setnx命令</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (putIfAbsent(key, expiresStr)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//当redis存在这个key的时候，取出这个key，判断是否超时</span></span><br><span class="line">        String currentValue = get(key);</span><br><span class="line">        <span class="hljs-comment">//判断锁是否已经过期，过期则重新设置并获取</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (currentValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(Long.parseLong(currentValue) &lt; System.nanoTime() - EXPIRE_NANO)&#123;</span><br><span class="line">                <span class="hljs-comment">//设置锁并返回旧值：getSet</span></span><br><span class="line">                String oldValue = getAndSet(key, expiresStr);</span><br><span class="line">                <span class="hljs-comment">//比较锁的时间，如果不一致则可能是其他锁已经修改了值并获取</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (oldValue != <span class="hljs-keyword">null</span> &amp;&amp; oldValue.equals(currentValue)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"get redis lock timeout,key=["</span> + key + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title">unlock</span><span class="hljs-params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isBlank(key)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//redis的del命令</span></span><br><span class="line">        del(key);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="hljs-string">"redis unlock exception, key=&#123;&#125;"</span>, key, e);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 项目中代码存在的问题</p><ol><li>过期时间调用的是: System.nanoTime(),这就需要客户端的时间必须同步</li><li>getAndSet 虽然只有一个客户端可以获取锁，但是会覆盖过期时间</li><li>锁不具备拥有者标识，相当于所有客户端都拥有相同的key，且对应的value区分不出客户端，即任何客户端都可以解锁。举例：<strong>客户端A加锁，一段时间之后客户端A解锁，在执行删除key之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</strong></li></ol></blockquote><blockquote><p>加锁过程优化</p><ol><li>加锁原理：基于redis的set命令，value为每个客户端唯一的id，10000为过期时间，相当于setex和setnx两条命令的整合<img src="/2019/04/03/redis/redis001.png" alt></li><li>解锁原理(摘抄网上一段方法)<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令,保证了其原子性</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">del</span><span class="hljs-params">(Jedis jedis, String key, String requestId)</span> </span>&#123;</span><br><span class="line">        String script = <span class="hljs-string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line">        <span class="hljs-keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近项目当中需要处理分布式系统中的并发问题，自然地想到了引入分布式锁，本文旨在讲述用redis简单的实现分布式锁，对于复杂的类似于redis集群问题、为什么不用zk等，自己也在学习，希望可以以后有机会分享&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://www.zplxjj.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>linux 常用命令(持续更新)</title>
    <link href="https://www.zplxjj.com/2019/04/01/linux/"/>
    <id>https://www.zplxjj.com/2019/04/01/linux/</id>
    <published>2019-04-01T12:48:19.000Z</published>
    <updated>2019-07-09T06:38:18.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看磁盘空间大小"><a href="#查看磁盘空间大小" class="headerlink" title="查看磁盘空间大小"></a>查看磁盘空间大小</h1><ol><li>查看磁盘空间大小: df -h<img src="/2019/04/01/linux/linux001.png" alt><a id="more"></a></li><li><p>查看指定目录大小: du -sh &lt;目录名&gt;<img src="/2019/04/01/linux/linux002.png" alt></p></li><li><p>du -h [目录名]：查看指定文件夹下的所有文件大小（包含子文件夹)</p></li><li>对文件大小进行排序(进入当前目录下)：<img src="/2019/04/01/linux/linux003.png" alt></li></ol><h1 id="文本查询相关"><a href="#文本查询相关" class="headerlink" title="文本查询相关"></a>文本查询相关</h1><ol><li>统计某个词出现频率<img src="/2019/04/01/linux/linux004.png" alt></li><li>统计单词次数并按次数排序(每一行为一个单词):<img src="/2019/04/01/linux/linux005.png" alt></li><li>按照分隔符分词，然后排序，去重：<img src="/2019/04/01/linux/linux006.png" alt></li></ol><h1 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h1><ol><li>查看端口占用进程和进程占用端口<img src="/2019/04/01/linux/linux007.png" alt></li></ol><h1 id="mac下根据进程id查看端口占用"><a href="#mac下根据进程id查看端口占用" class="headerlink" title="mac下根据进程id查看端口占用"></a>mac下根据进程id查看端口占用</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -n -P | grep  27825</span><br></pre></td></tr></table></figure><h1 id="给用户授权可查看目录权限"><a href="#给用户授权可查看目录权限" class="headerlink" title="给用户授权可查看目录权限"></a>给用户授权可查看目录权限</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R zhangpeilei  /Users/zhangpeilei/local/elasticsearch-7.2.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查看磁盘空间大小&quot;&gt;&lt;a href=&quot;#查看磁盘空间大小&quot; class=&quot;headerlink&quot; title=&quot;查看磁盘空间大小&quot;&gt;&lt;/a&gt;查看磁盘空间大小&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;查看磁盘空间大小: df -h&lt;img src=&quot;/2019/04/01/linux/linux001.png&quot; alt&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.zplxjj.com/categories/linux/"/>
    
    
  </entry>
  
</feed>
